{"version":3,"file":"js/assets/libs/save/lib/memory-engine-9322de70735ca345dc69.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/packs/assets/libs/save/lib/memory-engine.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/assets/libs/save/lib/memory-engine.js\");\n","var emptyFn = function () {}\n  , Mingo = require('mingo')\n  , es = require('event-stream')\n\nmodule.exports = function (opts) {\n  var options = Object.assign({ idProperty: '_id' }, opts)\n    , self = es.map(createOrUpdate)\n    , data = []\n    , idSeq = 0\n\n  Mingo.setup({ key: options.idProperty })\n\n  function findById(id) {\n    var query = {}\n    query[ options.idProperty ] = id\n    return Mingo.find(data, query).first()\n  }\n\n  /**\n   * Checks that the object has the ID property present, then checks\n   * if the data object has that ID value present.e\n   *\n   * Returns an Error to the callback if either of the above checks fail\n   *\n   * @param {Object} object to check\n   * @param {Function} callback\n   * @api private\n   */\n  function checkForIdAndData(object, callback) {\n    var id = object[options.idProperty]\n      , foundObject\n    if (id === undefined || id === null) {\n      return callback(new Error('Object has no \\''\n        + options.idProperty + '\\' property'))\n    }\n\n    foundObject = findById(id)\n\n    if (foundObject === null) {\n      return callback(new Error('No object found with \\''\n        + options.idProperty + '\\' = \\'' + id + '\\''))\n    }\n\n    return callback(null, foundObject)\n  }\n\n  /**\n   * Create a new entity. Emits a 'create' event.\n   *\n   * @param {Object} object to create\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function create(object, callback) {\n    self.emit('create', object)\n    callback = callback || emptyFn\n    // clone the object\n    var extendedObject = Object.assign({}, object)\n\n    if (!extendedObject[options.idProperty]) {\n      idSeq += 1\n      extendedObject[options.idProperty] = '' + idSeq\n    } else {\n      if (findById(extendedObject[options.idProperty]) !== null) {\n        return callback(new Error('Key ' + extendedObject[options.idProperty] + ' already exists'))\n      }\n      // if an id is provided, cast to string.\n      extendedObject[options.idProperty] = '' + extendedObject[options.idProperty]\n    }\n    data.push(Object.assign({}, extendedObject))\n    self.emit('afterCreate', extendedObject)\n    callback(undefined, extendedObject)\n  }\n\n  /**\n   * Create or update a entity. Emits a 'create' event or a 'update'.\n   *\n   * @param {Object} object to create or update\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function createOrUpdate(object, callback) {\n    if (typeof object[options.idProperty] === 'undefined') {\n      // Create a new object\n      self.create(object, callback)\n    } else {\n      // Try and find the object first to update\n      var query = {}\n      query[options.idProperty] = object[options.idProperty]\n\n      self.findOne(query, function (err, foundObject) {\n        if (foundObject) {\n          // We found the object so update\n          self.update(object, callback)\n        } else {\n          // We didn't find the object so create\n          self.create(object, callback)\n        }\n      })\n    }\n  }\n\n  /**\n   * Reads a single entity. Emits a 'read' event.\n   *\n   * @param {Number} id to read\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function read(id, callback) {\n    var query = {}\n\n    self.emit('read', id)\n    callback = callback || emptyFn\n    query[options.idProperty] = '' + id\n    findByQuery(query, {}, function (error, objects) {\n      if (objects[0] !== undefined) {\n        var cloned = Object.assign({}, objects[0])\n        self.emit('received', cloned)\n        callback(undefined, cloned)\n      } else {\n        callback(undefined, undefined)\n      }\n    })\n  }\n\n  /**\n   * Updates a single entity. Emits an 'update' event. Optionally overwrites\n   * the entire entity, by default just Object.assigns it with the new values.\n   *\n   * @param {Object} object to update\n   * @param {Boolean} whether to overwrite or Object.assign the existing entity\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function update(object, overwrite, callback) {\n    if (typeof overwrite === 'function') {\n      callback = overwrite\n      overwrite = false\n    }\n    self.emit('update', object, overwrite)\n    callback = callback || emptyFn\n    var id = '' + object[options.idProperty]\n      , updatedObject\n\n    checkForIdAndData(object, function (error, foundObject) {\n      if (error) {\n        return callback(error)\n      }\n\n      if (overwrite) {\n        updatedObject = Object.assign({}, object)\n      } else {\n        updatedObject = Object.assign({}, foundObject, object)\n      }\n\n      var query = {}\n        , copy = Object.assign({}, updatedObject)\n      query[ options.idProperty ] = id\n      data = Mingo.remove(data, query)\n      data.push(updatedObject)\n      self.emit('afterUpdate', copy, overwrite)\n      callback(undefined, copy)\n    })\n  }\n\n  /**\n   * Deletes entities based on a query. Emits a 'delete' event. Performs a find\n   * by query, then calls delete for each item returned. Returns an error if no\n   * items match the query.\n   *\n   * @param {Object} query to delete on\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function deleteMany(query, callback) {\n    callback = callback || emptyFn\n    self.emit('deleteMany', query)\n    data = Mingo.remove(data, query)\n    self.emit('afterDeleteMany', query)\n    callback()\n  }\n\n  /**\n   * Deletes one entity. Emits a 'delete' event. Returns an error if the\n   * object can not be found or if the ID property is not present.\n   *\n   * @param {Object} object to delete\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function del(id, callback) {\n\n    callback = callback || emptyFn\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function or empty')\n    }\n\n    self.emit('delete', id)\n    var query = {}\n    query[ options.idProperty ] = id\n    deleteMany(query, function() {\n      self.emit('afterDelete', '' + id)\n      callback(undefined)\n    })\n  }\n\n  /**\n   * Performs a find on the data by search query.\n   *\n   * Sorting can be done similarly to mongo by providing a $sort option to\n   * the options object.\n   *\n   * The query can target fields in a subdocument similarly to mongo by passing\n   * a string reference to the subdocument in dot notation.\n   *\n   * @param {Object} query to search by\n   * @param {Object} search options\n   * @param {Function} callback\n   * @api private\n   */\n  function findByQuery(query, options, callback) {\n\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    var cursor = Mingo.find(data, query, options && options.fields)\n    if (options && options.sort) cursor = cursor.sort(options.sort)\n    if (options && options.limit) cursor = cursor.limit(options.limit)\n\n    var allData = getObjectCopies(cursor.all())\n\n    if (callback === undefined) {\n\n      return es.readArray(allData).pipe(es.map(function (data, cb) {\n          self.emit('received', data)\n          cb(null, data)\n        }))\n    } else {\n      callback(null, allData)\n    }\n\n  }\n\n  function getObjectCopies(objects) {\n    var copies = []\n    objects.forEach(function (object) {\n      copies.push(Object.assign({}, object))\n    })\n    return copies\n  }\n\n  /**\n   * Performs a find on the data. Emits a 'find' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  function find(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    self.emit('find', query, options)\n    if (callback !== undefined) {\n      findByQuery(query, options, function(error, data) {\n        if (error) return callback(error)\n        self.emit('received', data)\n        callback(null, data)\n      })\n    } else {\n      return findByQuery(query, options)\n    }\n  }\n\n  /**\n   * Performs a find on the data and limits the result set to 1.\n   * Emits a 'findOne' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  function findOne(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    self.emit('findOne', query, options)\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects[0])\n      callback(undefined, objects[0])\n    })\n  }\n\n  /**\n   * Performs a count by query. Emits a 'count' event.\n   *\n   * @param {Object} query to search by\n   * @param {Function} callback\n   * @api public\n   */\n  function count(query, callback) {\n    self.emit('count', query)\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects.length)\n      callback(undefined, objects.length)\n    })\n  }\n\n  Object.assign(self\n    , { create: create\n      , read: read\n      , update: update\n      , 'delete': del\n      , deleteMany: deleteMany\n      , find: find\n      , findOne: findOne\n      , count: count\n      , idProperty: options.idProperty\n      , createOrUpdate: createOrUpdate\n      })\n\n  return self\n\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAEA;;;;A","sourceRoot":""}