{"ast":null,"code":"//\n// Chart.extension.js\n// Makes chart bars corners rounded\n// Copied from https://codepen.io/jedtrow/full/ygRYgo\n//\nChart.elements.Rectangle.prototype.draw = function () {\n  var ctx = this._chart.ctx;\n  var vm = this._view;\n  var left, right, top, bottom, signX, signY, borderSkipped, radius;\n  var borderWidth = vm.borderWidth; // Set Radius Here\n  // If radius is large enough to cause drawing errors a max radius is imposed\n\n  var cornerRadius = 6;\n\n  if (!vm.horizontal) {\n    // bar\n    left = vm.x - vm.width / 2;\n    right = vm.x + vm.width / 2;\n    top = vm.y;\n    bottom = vm.base;\n    signX = 1;\n    signY = bottom > top ? 1 : -1;\n    borderSkipped = vm.borderSkipped || 'bottom';\n  } else {\n    // horizontal bar\n    left = vm.base;\n    right = vm.x;\n    top = vm.y - vm.height / 2;\n    bottom = vm.y + vm.height / 2;\n    signX = right > left ? 1 : -1;\n    signY = 1;\n    borderSkipped = vm.borderSkipped || 'left';\n  } // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n\n\n  if (borderWidth) {\n    // borderWidth shold be less than bar width and bar height.\n    var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\n    var halfStroke = borderWidth / 2; // Adjust borderWidth when bar top position is near vm.base(zero).\n\n    var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);\n    var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);\n    var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);\n    var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0); // not become a vertical line?\n\n    if (borderLeft !== borderRight) {\n      top = borderTop;\n      bottom = borderBottom;\n    } // not become a horizontal line?\n\n\n    if (borderTop !== borderBottom) {\n      left = borderLeft;\n      right = borderRight;\n    }\n  }\n\n  ctx.beginPath();\n  ctx.fillStyle = vm.backgroundColor;\n  ctx.strokeStyle = vm.borderColor;\n  ctx.lineWidth = borderWidth; // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n\n  var corners = [[left, bottom], [left, top], [right, top], [right, bottom]];\n\n  if (this._chart.config.data.datasets[this._datasetIndex].data[this._index] < 0) {\n    corners = [[left, top], [left, bottom], [right, top], [right, bottom]];\n  } // Find first (starting) corner with fallback to 'bottom'\n\n\n  var borders = ['bottom', 'left', 'top', 'right'];\n  var startCorner = borders.indexOf(borderSkipped, 0);\n\n  if (startCorner === -1) {\n    startCorner = 0;\n  }\n\n  function cornerAt(index) {\n    return corners[(startCorner + index) % 4];\n  } // Draw rectangle from 'startCorner'\n\n\n  var corner = cornerAt(0);\n  ctx.moveTo(corner[0], corner[1]);\n\n  for (var i = 1; i < 4; i++) {\n    corner = cornerAt(i);\n    nextCornerId = i + 1;\n\n    if (nextCornerId == 4) {\n      nextCornerId = 0;\n    }\n\n    nextCorner = cornerAt(nextCornerId);\n    width = corners[2][0] - corners[1][0];\n    height = corners[0][1] - corners[1][1];\n    x = corners[1][0];\n    y = corners[1][1];\n    var radius = cornerRadius; // Fix radius being too large\n\n    if (radius > height / 2) {\n      radius = height / 2;\n    }\n\n    if (radius > width / 2) {\n      radius = width / 2;\n    }\n\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n  }\n\n  ctx.fill();\n\n  if (borderWidth) {\n    ctx.stroke();\n  }\n};","map":{"version":3,"sources":["/home/mishal/Desktop/ruby/login/app/javascript/packs/assets/libs/chart.js/Chart.extension.js"],"names":["Chart","elements","Rectangle","prototype","draw","ctx","_chart","vm","_view","left","right","top","bottom","signX","signY","borderSkipped","radius","borderWidth","cornerRadius","horizontal","x","width","y","base","height","barSize","Math","min","abs","halfStroke","borderLeft","borderRight","borderTop","borderBottom","beginPath","fillStyle","backgroundColor","strokeStyle","borderColor","lineWidth","corners","config","data","datasets","_datasetIndex","_index","borders","startCorner","indexOf","cornerAt","index","corner","moveTo","i","nextCornerId","nextCorner","lineTo","quadraticCurveTo","fill","stroke"],"mappings":"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","sourcesContent":["//\r\n// Chart.extension.js\r\n// Makes chart bars corners rounded\r\n// Copied from https://codepen.io/jedtrow/full/ygRYgo\r\n//\r\n\r\nChart.elements.Rectangle.prototype.draw = function() {\r\n    \r\n    var ctx = this._chart.ctx;\r\n    var vm = this._view;\r\n    var left, right, top, bottom, signX, signY, borderSkipped, radius;\r\n    var borderWidth = vm.borderWidth;\r\n    // Set Radius Here\r\n    // If radius is large enough to cause drawing errors a max radius is imposed\r\n    var cornerRadius = 6;\r\n\r\n    if (!vm.horizontal) {\r\n        // bar\r\n        left = vm.x - vm.width / 2;\r\n        right = vm.x + vm.width / 2;\r\n        top = vm.y;\r\n        bottom = vm.base;\r\n        signX = 1;\r\n        signY = bottom > top? 1: -1;\r\n        borderSkipped = vm.borderSkipped || 'bottom';\r\n    } else {\r\n        // horizontal bar\r\n        left = vm.base;\r\n        right = vm.x;\r\n        top = vm.y - vm.height / 2;\r\n        bottom = vm.y + vm.height / 2;\r\n        signX = right > left? 1: -1;\r\n        signY = 1;\r\n        borderSkipped = vm.borderSkipped || 'left';\r\n    }\r\n\r\n    // Canvas doesn't allow us to stroke inside the width so we can\r\n    // adjust the sizes to fit if we're setting a stroke on the line\r\n    if (borderWidth) {\r\n        // borderWidth shold be less than bar width and bar height.\r\n        var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\r\n        borderWidth = borderWidth > barSize? barSize: borderWidth;\r\n        var halfStroke = borderWidth / 2;\r\n        // Adjust borderWidth when bar top position is near vm.base(zero).\r\n        var borderLeft = left + (borderSkipped !== 'left'? halfStroke * signX: 0);\r\n        var borderRight = right + (borderSkipped !== 'right'? -halfStroke * signX: 0);\r\n        var borderTop = top + (borderSkipped !== 'top'? halfStroke * signY: 0);\r\n        var borderBottom = bottom + (borderSkipped !== 'bottom'? -halfStroke * signY: 0);\r\n        // not become a vertical line?\r\n        if (borderLeft !== borderRight) {\r\n            top = borderTop;\r\n            bottom = borderBottom;\r\n        }\r\n        // not become a horizontal line?\r\n        if (borderTop !== borderBottom) {\r\n            left = borderLeft;\r\n            right = borderRight;\r\n        }\r\n    }\r\n\r\n    ctx.beginPath();\r\n    ctx.fillStyle = vm.backgroundColor;\r\n    ctx.strokeStyle = vm.borderColor;\r\n    ctx.lineWidth = borderWidth;\r\n\r\n    // Corner points, from bottom-left to bottom-right clockwise\r\n    // | 1 2 |\r\n    // | 0 3 |\r\n    var corners = [\r\n        [left, bottom],\r\n        [left, top],\r\n        [right, top],\r\n        [right, bottom]\r\n    ];\r\n    if(this._chart.config.data.datasets[this._datasetIndex].data[this._index] < 0) {\r\n        corners = [\r\n            [left, top],\r\n            [left, bottom],\r\n            [right, top],\r\n            [right, bottom]\r\n        ];\r\n    }\r\n\r\n    // Find first (starting) corner with fallback to 'bottom'\r\n    var borders = ['bottom', 'left', 'top', 'right'];\r\n    var startCorner = borders.indexOf(borderSkipped, 0);\r\n    if (startCorner === -1) {\r\n        startCorner = 0;\r\n    }\r\n\r\n    function cornerAt(index) {\r\n        return corners[(startCorner + index) % 4];\r\n    }\r\n\r\n    // Draw rectangle from 'startCorner'\r\n    var corner = cornerAt(0);\r\n    ctx.moveTo(corner[0], corner[1]);\r\n\r\n    for (var i = 1; i < 4; i++) {\r\n        corner = cornerAt(i);\r\n        nextCornerId = i+1;\r\n        if(nextCornerId == 4){\r\n            nextCornerId = 0\r\n        }\r\n\r\n        nextCorner = cornerAt(nextCornerId);\r\n\r\n        width = corners[2][0] - corners[1][0];\r\n        height = corners[0][1] - corners[1][1];\r\n        x = corners[1][0];\r\n        y = corners[1][1];\r\n        \r\n        var radius = cornerRadius;\r\n        \r\n        // Fix radius being too large\r\n        if(radius > height/2){\r\n            radius = height/2;\r\n        }if(radius > width/2){\r\n            radius = width/2;\r\n        }\r\n\r\n        ctx.moveTo(x + radius, y);\r\n        ctx.lineTo(x + width - radius, y);\r\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        ctx.lineTo(x + width, y + height - radius);\r\n        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        ctx.lineTo(x + radius, y + height);\r\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        ctx.lineTo(x, y + radius);\r\n        ctx.quadraticCurveTo(x, y, x + radius, y);\r\n\r\n    }\r\n\r\n    ctx.fill();\r\n    if (borderWidth) {\r\n        ctx.stroke();\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}