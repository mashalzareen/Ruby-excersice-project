{"ast":null,"code":"var emptyFn = function emptyFn() {},\n    Mingo = require('mingo'),\n    es = require('event-stream');\n\nmodule.exports = function (opts) {\n  var options = Object.assign({\n    idProperty: '_id'\n  }, opts),\n      self = es.map(createOrUpdate),\n      data = [],\n      idSeq = 0;\n  Mingo.setup({\n    key: options.idProperty\n  });\n\n  function findById(id) {\n    var query = {};\n    query[options.idProperty] = id;\n    return Mingo.find(data, query).first();\n  }\n  /**\n   * Checks that the object has the ID property present, then checks\n   * if the data object has that ID value present.e\n   *\n   * Returns an Error to the callback if either of the above checks fail\n   *\n   * @param {Object} object to check\n   * @param {Function} callback\n   * @api private\n   */\n\n\n  function checkForIdAndData(object, callback) {\n    var id = object[options.idProperty],\n        foundObject;\n\n    if (id === undefined || id === null) {\n      return callback(new Error('Object has no \\'' + options.idProperty + '\\' property'));\n    }\n\n    foundObject = findById(id);\n\n    if (foundObject === null) {\n      return callback(new Error('No object found with \\'' + options.idProperty + '\\' = \\'' + id + '\\''));\n    }\n\n    return callback(null, foundObject);\n  }\n  /**\n   * Create a new entity. Emits a 'create' event.\n   *\n   * @param {Object} object to create\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n\n  function create(object, callback) {\n    self.emit('create', object);\n    callback = callback || emptyFn; // clone the object\n\n    var extendedObject = Object.assign({}, object);\n\n    if (!extendedObject[options.idProperty]) {\n      idSeq += 1;\n      extendedObject[options.idProperty] = '' + idSeq;\n    } else {\n      if (findById(extendedObject[options.idProperty]) !== null) {\n        return callback(new Error('Key ' + extendedObject[options.idProperty] + ' already exists'));\n      } // if an id is provided, cast to string.\n\n\n      extendedObject[options.idProperty] = '' + extendedObject[options.idProperty];\n    }\n\n    data.push(Object.assign({}, extendedObject));\n    self.emit('afterCreate', extendedObject);\n    callback(undefined, extendedObject);\n  }\n  /**\n   * Create or update a entity. Emits a 'create' event or a 'update'.\n   *\n   * @param {Object} object to create or update\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n\n  function createOrUpdate(object, callback) {\n    if (typeof object[options.idProperty] === 'undefined') {\n      // Create a new object\n      self.create(object, callback);\n    } else {\n      // Try and find the object first to update\n      var query = {};\n      query[options.idProperty] = object[options.idProperty];\n      self.findOne(query, function (err, foundObject) {\n        if (foundObject) {\n          // We found the object so update\n          self.update(object, callback);\n        } else {\n          // We didn't find the object so create\n          self.create(object, callback);\n        }\n      });\n    }\n  }\n  /**\n   * Reads a single entity. Emits a 'read' event.\n   *\n   * @param {Number} id to read\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n\n  function read(id, callback) {\n    var query = {};\n    self.emit('read', id);\n    callback = callback || emptyFn;\n    query[options.idProperty] = '' + id;\n    findByQuery(query, {}, function (error, objects) {\n      if (objects[0] !== undefined) {\n        var cloned = Object.assign({}, objects[0]);\n        self.emit('received', cloned);\n        callback(undefined, cloned);\n      } else {\n        callback(undefined, undefined);\n      }\n    });\n  }\n  /**\n   * Updates a single entity. Emits an 'update' event. Optionally overwrites\n   * the entire entity, by default just Object.assigns it with the new values.\n   *\n   * @param {Object} object to update\n   * @param {Boolean} whether to overwrite or Object.assign the existing entity\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n\n  function update(object, overwrite, callback) {\n    if (typeof overwrite === 'function') {\n      callback = overwrite;\n      overwrite = false;\n    }\n\n    self.emit('update', object, overwrite);\n    callback = callback || emptyFn;\n    var id = '' + object[options.idProperty],\n        updatedObject;\n    checkForIdAndData(object, function (error, foundObject) {\n      if (error) {\n        return callback(error);\n      }\n\n      if (overwrite) {\n        updatedObject = Object.assign({}, object);\n      } else {\n        updatedObject = Object.assign({}, foundObject, object);\n      }\n\n      var query = {},\n          copy = Object.assign({}, updatedObject);\n      query[options.idProperty] = id;\n      data = Mingo.remove(data, query);\n      data.push(updatedObject);\n      self.emit('afterUpdate', copy, overwrite);\n      callback(undefined, copy);\n    });\n  }\n  /**\n   * Deletes entities based on a query. Emits a 'delete' event. Performs a find\n   * by query, then calls delete for each item returned. Returns an error if no\n   * items match the query.\n   *\n   * @param {Object} query to delete on\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n\n  function deleteMany(query, callback) {\n    callback = callback || emptyFn;\n    self.emit('deleteMany', query);\n    data = Mingo.remove(data, query);\n    self.emit('afterDeleteMany', query);\n    callback();\n  }\n  /**\n   * Deletes one entity. Emits a 'delete' event. Returns an error if the\n   * object can not be found or if the ID property is not present.\n   *\n   * @param {Object} object to delete\n   * @param {Function} callback (optional)\n   * @api public\n   */\n\n\n  function del(id, callback) {\n    callback = callback || emptyFn;\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function or empty');\n    }\n\n    self.emit('delete', id);\n    var query = {};\n    query[options.idProperty] = id;\n    deleteMany(query, function () {\n      self.emit('afterDelete', '' + id);\n      callback(undefined);\n    });\n  }\n  /**\n   * Performs a find on the data by search query.\n   *\n   * Sorting can be done similarly to mongo by providing a $sort option to\n   * the options object.\n   *\n   * The query can target fields in a subdocument similarly to mongo by passing\n   * a string reference to the subdocument in dot notation.\n   *\n   * @param {Object} query to search by\n   * @param {Object} search options\n   * @param {Function} callback\n   * @api private\n   */\n\n\n  function findByQuery(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    var cursor = Mingo.find(data, query, options && options.fields);\n    if (options && options.sort) cursor = cursor.sort(options.sort);\n    if (options && options.limit) cursor = cursor.limit(options.limit);\n    var allData = getObjectCopies(cursor.all());\n\n    if (callback === undefined) {\n      return es.readArray(allData).pipe(es.map(function (data, cb) {\n        self.emit('received', data);\n        cb(null, data);\n      }));\n    } else {\n      callback(null, allData);\n    }\n  }\n\n  function getObjectCopies(objects) {\n    var copies = [];\n    objects.forEach(function (object) {\n      copies.push(Object.assign({}, object));\n    });\n    return copies;\n  }\n  /**\n   * Performs a find on the data. Emits a 'find' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n\n\n  function find(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    self.emit('find', query, options);\n\n    if (callback !== undefined) {\n      findByQuery(query, options, function (error, data) {\n        if (error) return callback(error);\n        self.emit('received', data);\n        callback(null, data);\n      });\n    } else {\n      return findByQuery(query, options);\n    }\n  }\n  /**\n   * Performs a find on the data and limits the result set to 1.\n   * Emits a 'findOne' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n\n\n  function findOne(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    self.emit('findOne', query, options);\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects[0]);\n      callback(undefined, objects[0]);\n    });\n  }\n  /**\n   * Performs a count by query. Emits a 'count' event.\n   *\n   * @param {Object} query to search by\n   * @param {Function} callback\n   * @api public\n   */\n\n\n  function count(query, callback) {\n    self.emit('count', query);\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects.length);\n      callback(undefined, objects.length);\n    });\n  }\n\n  Object.assign(self, {\n    create: create,\n    read: read,\n    update: update,\n    'delete': del,\n    deleteMany: deleteMany,\n    find: find,\n    findOne: findOne,\n    count: count,\n    idProperty: options.idProperty,\n    createOrUpdate: createOrUpdate\n  });\n  return self;\n};","map":{"version":3,"sources":["/home/mishal/Desktop/ruby/login/app/javascript/packs/assets/libs/save/lib/memory-engine.js"],"names":["emptyFn","Mingo","require","es","module","exports","opts","options","Object","assign","idProperty","self","map","createOrUpdate","data","idSeq","setup","key","findById","id","query","find","first","checkForIdAndData","object","callback","foundObject","undefined","Error","create","emit","extendedObject","push","findOne","err","update","read","findByQuery","error","objects","cloned","overwrite","updatedObject","copy","remove","deleteMany","del","TypeError","cursor","fields","sort","limit","allData","getObjectCopies","all","readArray","pipe","cb","copies","forEach","count","length"],"mappings":"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","sourcesContent":["var emptyFn = function () {}\n  , Mingo = require('mingo')\n  , es = require('event-stream')\n\nmodule.exports = function (opts) {\n  var options = Object.assign({ idProperty: '_id' }, opts)\n    , self = es.map(createOrUpdate)\n    , data = []\n    , idSeq = 0\n\n  Mingo.setup({ key: options.idProperty })\n\n  function findById(id) {\n    var query = {}\n    query[ options.idProperty ] = id\n    return Mingo.find(data, query).first()\n  }\n\n  /**\n   * Checks that the object has the ID property present, then checks\n   * if the data object has that ID value present.e\n   *\n   * Returns an Error to the callback if either of the above checks fail\n   *\n   * @param {Object} object to check\n   * @param {Function} callback\n   * @api private\n   */\n  function checkForIdAndData(object, callback) {\n    var id = object[options.idProperty]\n      , foundObject\n    if (id === undefined || id === null) {\n      return callback(new Error('Object has no \\''\n        + options.idProperty + '\\' property'))\n    }\n\n    foundObject = findById(id)\n\n    if (foundObject === null) {\n      return callback(new Error('No object found with \\''\n        + options.idProperty + '\\' = \\'' + id + '\\''))\n    }\n\n    return callback(null, foundObject)\n  }\n\n  /**\n   * Create a new entity. Emits a 'create' event.\n   *\n   * @param {Object} object to create\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function create(object, callback) {\n    self.emit('create', object)\n    callback = callback || emptyFn\n    // clone the object\n    var extendedObject = Object.assign({}, object)\n\n    if (!extendedObject[options.idProperty]) {\n      idSeq += 1\n      extendedObject[options.idProperty] = '' + idSeq\n    } else {\n      if (findById(extendedObject[options.idProperty]) !== null) {\n        return callback(new Error('Key ' + extendedObject[options.idProperty] + ' already exists'))\n      }\n      // if an id is provided, cast to string.\n      extendedObject[options.idProperty] = '' + extendedObject[options.idProperty]\n    }\n    data.push(Object.assign({}, extendedObject))\n    self.emit('afterCreate', extendedObject)\n    callback(undefined, extendedObject)\n  }\n\n  /**\n   * Create or update a entity. Emits a 'create' event or a 'update'.\n   *\n   * @param {Object} object to create or update\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function createOrUpdate(object, callback) {\n    if (typeof object[options.idProperty] === 'undefined') {\n      // Create a new object\n      self.create(object, callback)\n    } else {\n      // Try and find the object first to update\n      var query = {}\n      query[options.idProperty] = object[options.idProperty]\n\n      self.findOne(query, function (err, foundObject) {\n        if (foundObject) {\n          // We found the object so update\n          self.update(object, callback)\n        } else {\n          // We didn't find the object so create\n          self.create(object, callback)\n        }\n      })\n    }\n  }\n\n  /**\n   * Reads a single entity. Emits a 'read' event.\n   *\n   * @param {Number} id to read\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function read(id, callback) {\n    var query = {}\n\n    self.emit('read', id)\n    callback = callback || emptyFn\n    query[options.idProperty] = '' + id\n    findByQuery(query, {}, function (error, objects) {\n      if (objects[0] !== undefined) {\n        var cloned = Object.assign({}, objects[0])\n        self.emit('received', cloned)\n        callback(undefined, cloned)\n      } else {\n        callback(undefined, undefined)\n      }\n    })\n  }\n\n  /**\n   * Updates a single entity. Emits an 'update' event. Optionally overwrites\n   * the entire entity, by default just Object.assigns it with the new values.\n   *\n   * @param {Object} object to update\n   * @param {Boolean} whether to overwrite or Object.assign the existing entity\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function update(object, overwrite, callback) {\n    if (typeof overwrite === 'function') {\n      callback = overwrite\n      overwrite = false\n    }\n    self.emit('update', object, overwrite)\n    callback = callback || emptyFn\n    var id = '' + object[options.idProperty]\n      , updatedObject\n\n    checkForIdAndData(object, function (error, foundObject) {\n      if (error) {\n        return callback(error)\n      }\n\n      if (overwrite) {\n        updatedObject = Object.assign({}, object)\n      } else {\n        updatedObject = Object.assign({}, foundObject, object)\n      }\n\n      var query = {}\n        , copy = Object.assign({}, updatedObject)\n      query[ options.idProperty ] = id\n      data = Mingo.remove(data, query)\n      data.push(updatedObject)\n      self.emit('afterUpdate', copy, overwrite)\n      callback(undefined, copy)\n    })\n  }\n\n  /**\n   * Deletes entities based on a query. Emits a 'delete' event. Performs a find\n   * by query, then calls delete for each item returned. Returns an error if no\n   * items match the query.\n   *\n   * @param {Object} query to delete on\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function deleteMany(query, callback) {\n    callback = callback || emptyFn\n    self.emit('deleteMany', query)\n    data = Mingo.remove(data, query)\n    self.emit('afterDeleteMany', query)\n    callback()\n  }\n\n  /**\n   * Deletes one entity. Emits a 'delete' event. Returns an error if the\n   * object can not be found or if the ID property is not present.\n   *\n   * @param {Object} object to delete\n   * @param {Function} callback (optional)\n   * @api public\n   */\n  function del(id, callback) {\n\n    callback = callback || emptyFn\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function or empty')\n    }\n\n    self.emit('delete', id)\n    var query = {}\n    query[ options.idProperty ] = id\n    deleteMany(query, function() {\n      self.emit('afterDelete', '' + id)\n      callback(undefined)\n    })\n  }\n\n  /**\n   * Performs a find on the data by search query.\n   *\n   * Sorting can be done similarly to mongo by providing a $sort option to\n   * the options object.\n   *\n   * The query can target fields in a subdocument similarly to mongo by passing\n   * a string reference to the subdocument in dot notation.\n   *\n   * @param {Object} query to search by\n   * @param {Object} search options\n   * @param {Function} callback\n   * @api private\n   */\n  function findByQuery(query, options, callback) {\n\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    var cursor = Mingo.find(data, query, options && options.fields)\n    if (options && options.sort) cursor = cursor.sort(options.sort)\n    if (options && options.limit) cursor = cursor.limit(options.limit)\n\n    var allData = getObjectCopies(cursor.all())\n\n    if (callback === undefined) {\n\n      return es.readArray(allData).pipe(es.map(function (data, cb) {\n          self.emit('received', data)\n          cb(null, data)\n        }))\n    } else {\n      callback(null, allData)\n    }\n\n  }\n\n  function getObjectCopies(objects) {\n    var copies = []\n    objects.forEach(function (object) {\n      copies.push(Object.assign({}, object))\n    })\n    return copies\n  }\n\n  /**\n   * Performs a find on the data. Emits a 'find' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  function find(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    self.emit('find', query, options)\n    if (callback !== undefined) {\n      findByQuery(query, options, function(error, data) {\n        if (error) return callback(error)\n        self.emit('received', data)\n        callback(null, data)\n      })\n    } else {\n      return findByQuery(query, options)\n    }\n  }\n\n  /**\n   * Performs a find on the data and limits the result set to 1.\n   * Emits a 'findOne' event.\n   *\n   * @param {Object} query to search by\n   * @param {Object} options\n   * @param {Function} callback\n   * @api public\n   */\n  function findOne(query, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    self.emit('findOne', query, options)\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects[0])\n      callback(undefined, objects[0])\n    })\n  }\n\n  /**\n   * Performs a count by query. Emits a 'count' event.\n   *\n   * @param {Object} query to search by\n   * @param {Function} callback\n   * @api public\n   */\n  function count(query, callback) {\n    self.emit('count', query)\n    findByQuery(query, options, function (error, objects) {\n      self.emit('received', objects.length)\n      callback(undefined, objects.length)\n    })\n  }\n\n  Object.assign(self\n    , { create: create\n      , read: read\n      , update: update\n      , 'delete': del\n      , deleteMany: deleteMany\n      , find: find\n      , findOne: findOne\n      , count: count\n      , idProperty: options.idProperty\n      , createOrUpdate: createOrUpdate\n      })\n\n  return self\n\n}\n"]},"metadata":{},"sourceType":"module"}